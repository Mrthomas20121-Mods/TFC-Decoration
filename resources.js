const fs = require('fs')
const path = require('path')

const main_path = path.join('.', 'src', 'main', 'resources', 'assets', 'tfc_decoration')

/**
 * Check if a file exist
 * @param {string} file 
 * @returns boolean
 */
const exist = (file) => {
    return fs.existsSync(file)
}

/**
 * @class JsonObject
 * @author Mrthomas20121
 */
class JsonObject extends Object {
    constructor(class_name) {
        super()
        this.__comment =`generated by generateResources.js class: ${class_name}`
    }

    build(starting_path, ...args) {
        let json_path = path.join(starting_path, args.join('/'))
        
        if(!exist(json_path)) fs.writeFileSync(json_path, JSON.stringify(this, null, 2), 'utf8')
    }
}

class Model extends JsonObject {
    constructor(parent, textures={}) {
        super('model')
        this.parent = parent
        this.textures = textures
    }

    /**
     * 
     * @param  {string[]} args 
     */
    build(...args) {
        super.build('model', args)
    }
}

class Blockstate extends JsonObject {
    constructor(model, textures, variant={ "normal":[{}] }) {
        super('Blockstate')
        this.forge_marker = 1
        this.default = {
            model,
            textures
        }
        this.variant = variant
    }

    build(...args) {
        super.build(path.join(main_path, 'blockstates'), args)
    }
}

class ShapedRecipe extends JsonObject {
    constructor() {
        super('ShapedRecipe')
        this.type = 'minecraft:crafting_shaped'
    }

    /**
     * @override
     * @param  {string[]} args 
     */
    build(...args) {
        super.build(path.join(main_path, 'recipes'), args)
    }
}

/**
 * Shapeless recipes
 */
class ShapelessRecipe extends JsonObject {
    constructor() {
        super('ShapelessRecipe')
        this.type = 'minecraft:crafting_shapeless'
        this.ingredients = []
        this.result = {}
    }

    addIngredient(type, name) {
        if(type=='item') {
            this.ingredients.push({
                item:name
            })
        }
    }

    addOutput(name) {
        this.result = {
            item:name
        }
    }

    /**
     * @override
     * @param  {string[]} args 
     */
    build(...args) {
        super.build(path.join(main_path, 'recipes'), args)
    }
}

/**
 * Base Block Model
 * @param {string} block_name the block texture path
 * @param  {string[]} args path to the blockstate
 */
const cube_all = (block_name, ...args) => {
    new Blockstate('cube_all', { all:block_name }).build(args)
}

/**
 * Base Item Model
 * @param {string} layer0 
 * @param  {string[]} args path to the model
 */
const ItemGenerated = (layer0, ...args) => {
    new Model('item/generated', { layer0 }).build(args)
}

module.exports = {
    model: {
        block: {
            Blockstate,
            cube_all
        },
        item: {
            Model,
            ItemGenerated
        }
    },
    recipes: {
        ShapedRecipe,
        ShapelessRecipe
    }
}