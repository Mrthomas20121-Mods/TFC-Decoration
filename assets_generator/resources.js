const fs = require('fs')
const path = require('path')

const tfc_decoration_path = path.join('..', 'src', 'main', 'resources', 'assets', 'tfc_decoration')
const tfc_path = path.join('..', 'src', 'main', 'resources', 'assets', 'tfc')

/**
 * Check if a file exist
 * @param {string} file 
 * @returns boolean
 */
const exist = (file) => {
    return fs.existsSync(file)
}

/**
 * @class JsonObject
 * @author Mrthomas20121
 */
class JsonObject extends Object {
    constructor(class_name) {
        super()
        this.__comment =`generated by generateResources.js class: ${class_name}`
    }

    build(starting_path, args) {
        let json_path = path.join(starting_path, args.join('/'))
        let argsOutput = ''
        //console.log(starting_path, json_path, args)
        for(let arg of args) {
            argsOutput = path.join(argsOutput, arg)
            let p = path.join(starting_path, argsOutput)
            if(!exist(p)) {
                if(!p.endsWith('.json')) fs.mkdirSync(p)
            }
        }
        
        if(!exist(json_path)) fs.writeFileSync(json_path, JSON.stringify(this, null, 2), 'utf8')
    }
}

class Model extends JsonObject {
    constructor(parent, textures={}) {
        super(Model.name)
        this.parent = parent
        this.textures = textures
    }

    /**
     * 
     * @param  {string[]} args 
     */
    build(args) {
        super.build(path.join(tfc_decoration_path, 'models', 'item'), args)
    }
}

class BlockModel extends JsonObject {
    constructor(textures={}) {
        super(BlockModel.name)
        this.ambientocclusion = false
        this.textures = textures
    }
}

class LadderBlockModel extends BlockModel {
    /**
     * @param {string} texture_path 
     */
    constructor(texture_path) {
        super({
            particle:texture_path,
            texture:texture_path
        })

        this.elements = [
            {   "from": [ 0, 0, 15.2 ],
                "to": [ 16, 16, 15.2 ],
                "shade": false,
                "faces": {
                    "north": { "uv": [ 0, 0, 16, 16 ], "texture": "#texture" },
                    "south": { "uv": [ 0, 0, 16, 16 ], "texture": "#texture" }
                }
            }
        ]
    }

    /**
     * @param  {string[]} args 
     */
    build(args) {
        super.build(path.join(tfc_decoration_path, 'models', 'block'), args)
    }
}

class Blockstate extends JsonObject {
    constructor(model, textures, variant={ "normal":[{}] }) {
        super('Blockstate')
        this.forge_marker = 1
        this.default = {
            model,
            textures
        }
        this.variant = variant
    }

    build(args) {
        super.build(path.join(tfc_decoration_path, 'blockstates'), args)
    }
}

class Recipe extends JsonObject {
    /**
     * Base Recipe Class. any new recipe type added need to extend this
     * @param {string} class_name 
     * @param {string} type 
     */
    constructor(class_name, type) {
        super(class_name)
        this.type = type
    }

    addIngredient(name) {

    }

    /**
     * Add an output item.
     * @param {string} name
     * @param {number} count
     */
    addOutputItem(name, count) {
        this.result = {
            item:name,
            count:count
        }
    }
}

class ShapedRecipe extends Recipe {
    constructor() {
        super(ShapedRecipe.name, 'minecraft:crafting_shaped')
    }

    setPattern(pattern) {
        this.pattern = pattern
    }

    /**
     * @override
     * @param {string} name
     */
    addIngredient(name, key) {
        
    }

    /**
     * @override
     * @param  {string[]} args 
     */
    build(...args) {
        super.build(path.join(tfc_decoration_path, 'recipes'), args)
    }
}

/**
 * Shapeless recipes
 */
class ShapelessRecipe extends Recipe {
    constructor() {
        super(ShapelessRecipe.name, 'minecraft:crafting_shapeless')
        this.ingredients = []
        this.result = {}
    }

    /**
     * @param {string} name 
     */
    addIngredient(name) {
        this.ingredients.push({
            item:name
        })
    }

    addOreIngredient(name) {
        this.ingredients.push({
            type: 'forge:ore_dict',
            ore:name
        })
    }

    /**
     * @override
     * @param  {string[]} args 
     */
    build(...args) {
        super.build(path.join(tfc_decoration_path, 'recipes'), args)
    }
}

/**
 * Base Block Model
 * @param {string} block_name the block texture path
 * @param  {string[]} args path to the blockstate
 */
const cube_all = (block_name, ...args) => {
    new Blockstate('cube_all', { all:block_name }).build(args)
}

/**
 * create a cube bottom top blockstate
 * @param {string[]} blocks 
 * @param  {string[]} args 
 */
const cube_bottom_top = (blocks, ...args) => {
    new Blockstate('cube_bottom_top', { side:blocks[0], bottom:blocks[1], top:blocks[2] }).build(args)
}

/**
 * Base Item Model
 * @param {string} layer0 
 * @param  {string[]} args path to the model
 */
const ItemGenerated = (layer0, ...args) => {
    new Model('item/generated', { layer0 }).build(args)
}

module.exports = {
    model: {
        block: {
            Blockstate,
            cube_all,
            cube_bottom_top,
            LadderBlockModel
        },
        item: {
            Model,
            ItemGenerated
        }
    },
    recipes: {
        // default recipe class
        Recipe,

        // minecraft shaped and shapeless recipe class
        ShapedRecipe,
        ShapelessRecipe
    }
}