#!/bin/env python3
import json
import os
import time
import zipfile

os.chdir('src/main/resources/assets/tfc_decoration/')

ROCK_TYPES = [
    'granite',
    'diorite',
    'gabbro',
    'shale',
    'claystone',
    'rocksalt',
    'limestone',
    'conglomerate',
    'dolomite',
    'chert',
    'chalk',
    'rhyolite',
    'basalt',
    'andesite',
    'dacite',
    'quartzite',
    'slate',
    'phyllite',
    'schist',
    'gneiss',
    'marble',
	'blaimorite',
    'boninite',
    'carbonatite',
    'foidolite',
    'arkose',
    'jaspillite',
    'travertine',
    'wackestone',
    'blueschist',
    'greenschist',
    'cataclasite',
    'mylonite'
]

FULLBLOCK_TYPES = [
    'mossy_cobble',
	'mossy_brick',
	'cracked_brick',
	'wet_mud',
	'mud',
    'sadnstone'
]

WOOD_TYPES = [
    'ash',
    'aspen',
    'birch',
    'chestnut',
    'douglas_fir',
    'hickory',
    'maple',
    'oak',
    'pine',
    'sequoia',
    'spruce',
    'sycamore',
    'white_cedar',
    'willow',
    'kapok',
    'acacia',
    'rosewood',
    'blackwood',
    'palm',
    'hevea'
]



def del_none(d):
    """
    https://stackoverflow.com/a/4256027/4355781
    Modifies input!
    """
    for key, value in list(d.items()):
        if value is None:
            del d[key]
        elif isinstance(value, dict):
            del_none(value)
    return d


def blockstate(filename_parts, model, textures, variants=None, uvlock=None):
    """
    Magic.
    :param filename_parts: Iterable of strings.
    :param model: String or None
    :param textures: Dict of <string>:<string> OR <iterable of strings>:<string>
    :param variants: Dict of <string>:<variant> OR "normal":None (to disable the normal default)
    """
    _variants = {
        'normal': [{}]
    }
    if variants:
        _variants.update(variants)

    # Unpack any tuple keys to simple string->string pairs
    _textures = {}
    for key, val in textures.items():
        if isinstance(key, str):
            _textures[key] = val
        else:
            for x in key:
                _textures[x] = val

    p = os.path.join('blockstates', *filename_parts) + '.json'
    os.makedirs(os.path.dirname(p), exist_ok=True)
    with open(p, 'w') as file:
        json.dump(del_none({
            '__comment': 'Generated by generateResources.py function: blockstate',
            'forge_marker': 1,
            'defaults': {
                'model': model,
                'textures': _textures,
                'uvlock': True if uvlock else None
            },
            'variants': _variants
        }), file, indent=2)


def cube_all(filename_parts, texture, variants=None, model='cube_all'):
    blockstate(filename_parts, model, textures={'all': texture}, variants=variants)


def model(filename_parts, parent, textures):
    p = os.path.join('models', *filename_parts) + '.json'
    os.makedirs(os.path.dirname(p), exist_ok=True)
    with open(p, 'w') as file:
        json.dump(del_none({
            '__comment': 'Generated by generateResources.py function: model',
            'parent': parent,
            'textures': textures,
        }), file, indent=2)


def item(filename_parts, *layers, parent='item/generated'):
    model(('item', *filename_parts), parent,
          None if len(layers) == 0 else {'layer%d' % i: v for i, v in enumerate(layers)})

def shapedRecipe(filename_parts, wood):
    p = os.path.join('..\\tfc_decoration/recipes', *filename_parts) + '.json'
    os.makedirs(os.path.dirname(p), exist_ok=True)
    with open(p, 'w') as file:
        json.dump(del_none({
            "type": "minecraft:crafting_shaped",
              "pattern": [
                "XBX",
                "XBX"
              ],
              "key": {
                "X": {
                  "item": "tfc:wood/log/"+wood
                },
                "B": {
                  "item": "tfc:wood/lumber/"+wood
                }
              },
              "result": {
                "item": 'tfc_decoration:wood/fence_log/'+wood,
                "count": 8
              }
        }), file, indent=2)

def recipe(filename_parts, rock):
    p = os.path.join('..\\tfc_decoration/recipes', *filename_parts) + '.json'
    os.makedirs(os.path.dirname(p), exist_ok=True)
    with open(p, 'w') as file:
        json.dump(del_none({
            '__comment': 'Generated by generateResources.py function: recipe',
            'type': 'tfc:damage_item_shapeless',
            "ingredients": [
			{
			  "item": "tfc:bricks/"+rock
			},
			{
			  "type": "forge:ore_dict",
			  "ore": "chisel"
			}
			],
            'result': {
			  'item':'tfc_decoration:cracked_brick/'+rock
			},
        }), file, indent=2)

# ROCK STUFF
for rock_type in ROCK_TYPES:
    # FULL BLOCKS
    for block_type in FULLBLOCK_TYPES:
        cube_all((block_type, rock_type), 'tfc_decoration:blocks/stonetypes/%s/%s' % (block_type, rock_type))
    # recipe
    recipe(('brick',rock_type, 'cracked'), rock_type)

# WOOD STUFF

for wood_type in WOOD_TYPES:
    blockstate(('wood', 'fence_log',wood_type), 'tfc_decoration:wood/fence/fence_post', textures={
        'top':'tfc:blocks/wood/top/%s' % wood_type,
        'log':'tfc:blocks/wood/log/%s' % wood_type,
        'planks':'tfc:blocks/wood/planks/%s' % wood_type,
        'particle':'tfc:blocks/wood/log/%s' % wood_type
    }, variants= {
    "normal": [
      {}
    ],
    "inventory": {
      "model": "tfc_decoration:wood/fence/fence_inventory"
    },
    "north": {
      "true": {
        "submodel": "tfc_decoration:wood/fence/fence_side"
      },
      "false": {}
    },
    "east": {
      "true": {
        "submodel": "tfc_decoration:wood/fence/fence_side",
        "y": 90
      },
      "false": {}
    },
    "south": {
      "true": {
        "submodel": "tfc_decoration:wood/fence/fence_side",
        "y": 180
      },
      "false": {}
    },
    "west": {
      "true": {
        "submodel": "tfc_decoration:wood/fence/fence_side",
        "y": 270
      },
      "false": {}
    }
    })
    shapedRecipe(('wood', wood_type, wood_type+'_fence_log'), wood_type)